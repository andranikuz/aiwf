// Code generated by aiwf. DO NOT EDIT.

package customer_support_sdk

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/andranikuz/aiwf/runtime/go/aiwf"
)

// Agents contains all generated agents
type Agents struct {
	SupportBot *SupportBotAgent
}

// SupportBotAgent represents the support_bot agent
type SupportBotAgent struct {
	aiwf.AgentBase
	threadBinding *aiwf.ThreadBinding
}

// NewSupportBotAgent creates a new support_bot agent
func NewSupportBotAgent(client aiwf.ModelClient) *SupportBotAgent {
	return &SupportBotAgent{
		AgentBase: aiwf.AgentBase{
			Config: aiwf.AgentConfig{
				Name:           "support_bot",
				Model:          "gpt-4o",
				SystemPrompt:   `You are a helpful customer support agent.\nUnderstand customer issues and provide solutions.\nEscalate complex problems when needed.\n`,
				InputTypeName:  "SupportMessage",
				OutputTypeName: "SupportResponse",
				MaxTokens:      2000,
				Temperature:    0.7,
			},
			Client: client,
		},
		threadBinding: &aiwf.ThreadBinding{
			Name:     "default",
			Strategy: "append",
		},
	}
}

// Run executes the support_bot agent
func (a *SupportBotAgent) Run(ctx context.Context, input SupportMessage) (*SupportResponse, *aiwf.Trace, error) {
	// Validate input
	if err := ValidateSupportMessage(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	// Call model
	result, trace, err := a.CallModel(ctx, input, nil)
	if err != nil {
		return nil, trace, err
	}

	// Parse response
	var output SupportResponse
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}

// RunWithThread executes the support_bot agent with thread state
func (a *SupportBotAgent) RunWithThread(ctx context.Context, input SupportMessage, thread *aiwf.ThreadState) (*SupportResponse, *aiwf.Trace, error) {
	if err := ValidateSupportMessage(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	result, trace, err := a.CallModel(ctx, input, thread)
	if err != nil {
		return nil, trace, err
	}

	var output SupportResponse
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}

// ThreadBinding returns thread configuration for support_bot
func (a *SupportBotAgent) ThreadBinding() *aiwf.ThreadBinding {
	return a.threadBinding
}

// RunDialog executes the support_bot agent in dialog mode
func (a *SupportBotAgent) RunDialog(ctx context.Context, input SupportMessage, thread *aiwf.ThreadState, maxRounds int) (*SupportResponse, *aiwf.Trace, error) {
	// TODO: Implement dialog logic
	return a.RunWithThread(ctx, input, thread)
}


