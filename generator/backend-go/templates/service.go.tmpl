package {{ .Package }}

import (
    "reflect"

    "github.com/andranikuz/aiwf/runtime/go/aiwf"
)

type Service interface {
    Agents() Agents
{{- if .HasWorkflows }}
    Workflows() Workflows
{{- end }}
}

type service struct {
    client aiwf.ModelClient
}

func NewService(client aiwf.ModelClient) Service {
    return &service{client: client}
}

func (s *service) Agents() Agents { return &agents{client: s.client} }
{{- if .HasWorkflows }}
func (s *service) Workflows() Workflows { return &workflows{client: s.client} }
{{- end }}

func mergeTrace(base, next *aiwf.Trace) *aiwf.Trace {
    if base == nil {
        return next
    }
    if next == nil {
        return base
    }
    // TODO: объединить usage/attempts, пока возвращаем последний trace.
    return next
}

func mergeTraces(items ...*aiwf.Trace) *aiwf.Trace {
    var merged *aiwf.Trace
    for _, tr := range items {
        if tr == nil {
            continue
        }
        merged = mergeTrace(merged, tr)
    }
    return merged
}

func mergeWorkflowOutput[T any](base, next T) T {
    if any(base) == nil {
        return next
    }
    if reflect.ValueOf(base).IsZero() {
        return next
    }
    return base
}
