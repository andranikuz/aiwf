// Code generated by aiwf. DO NOT EDIT.

package translator_sdk

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/andranikuz/aiwf/runtime/go/aiwf"
)

// Agents contains all generated agents
type Agents struct {
	Translator *TranslatorAgent
}

// TranslatorAgent represents the translator agent
type TranslatorAgent struct {
	aiwf.AgentBase
}

// NewTranslatorAgent creates a new translator agent
func NewTranslatorAgent(client aiwf.ModelClient) *TranslatorAgent {
	return &TranslatorAgent{
		AgentBase: aiwf.AgentBase{
			Config: aiwf.AgentConfig{
				Name:           "translator",
				Model:          "gpt-4o",
				SystemPrompt:   `Translate text accurately while preserving meaning and tone.\nMaintain formatting and structure.\nAdapt cultural references appropriately.\n`,
				InputTypeName:  "TranslationRequest",
				OutputTypeName: "TranslationResult",
				MaxTokens:      2000,
				Temperature:    0.7,
			},
			Client: client,
		},
	}
}

// Run executes the translator agent
func (a *TranslatorAgent) Run(ctx context.Context, input TranslationRequest) (*TranslationResult, *aiwf.Trace, error) {
	// Validate input
	if err := ValidateTranslationRequest(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	// Call model
	result, trace, err := a.CallModel(ctx, input, nil)
	if err != nil {
		return nil, trace, err
	}

	// Parse response
	var output TranslationResult
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}


