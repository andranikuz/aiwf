// Code generated by aiwf. DO NOT EDIT.

package blog_pipeline_sdk

import (
	"fmt"
	"strings"

	"github.com/andranikuz/aiwf/runtime/go/aiwf"
)

// Service provides access to all agents and workflows
type Service struct {
	client        aiwf.ModelClient
	threadManager aiwf.ThreadManager
	artifactStore aiwf.ArtifactStore
	agents        *Agents
	workflows     map[string]aiwf.Workflow[any, any]
}

// NewService creates a new service instance
func NewService(client aiwf.ModelClient) *Service {
	s := &Service{
		client: client,
	}

	// Initialize agents
	researcherAgent := NewResearcherAgent(client)
	researcherAgent.Types = s // Inject TypeProvider
	outlinerAgent := NewOutlinerAgent(client)
	outlinerAgent.Types = s // Inject TypeProvider
	writerAgent := NewWriterAgent(client)
	writerAgent.Types = s // Inject TypeProvider
	editorAgent := NewEditorAgent(client)
	editorAgent.Types = s // Inject TypeProvider

	s.agents = &Agents{
		Editor: editorAgent,
		Researcher: researcherAgent,
		Outliner: outlinerAgent,
		Writer: writerAgent,
	}

	// Initialize workflows
	s.workflows = make(map[string]aiwf.Workflow[any, any])
	// TODO: Initialize blog_pipeline workflow

	return s
}

// WithThreadManager sets the thread manager
func (s *Service) WithThreadManager(tm aiwf.ThreadManager) *Service {
	s.threadManager = tm
	return s
}

// WithArtifactStore sets the artifact store
func (s *Service) WithArtifactStore(store aiwf.ArtifactStore) *Service {
	s.artifactStore = store
	return s
}

// Agents returns the agents instance
func (s *Service) Agents() *Agents {
	return s.agents
}

// ============ TYPE PROVIDER IMPLEMENTATION ============

// GetTypeMetadata returns metadata for a type
func (s *Service) GetTypeMetadata(typeName string) (any, error) {
	if meta, ok := TypeMetadata[typeName]; ok {
		return meta, nil
	}
	return nil, fmt.Errorf("type %s not found", typeName)
}

// GetInputTypeFor returns input type for an agent
func (s *Service) GetInputTypeFor(agentName string) (string, any, error) {
	switch agentName {
	case "researcher":
		return "ResearchInput", TypeMetadata["ResearchInput"], nil
	case "outliner":
		return "OutlineInput", TypeMetadata["OutlineInput"], nil
	case "writer":
		return "WritingInput", TypeMetadata["WritingInput"], nil
	case "editor":
		return "EditInput", TypeMetadata["EditInput"], nil
	default:
		return "", nil, fmt.Errorf("agent %s not found", agentName)
	}
}

// GetOutputTypeFor returns output type for an agent
func (s *Service) GetOutputTypeFor(agentName string) (string, any, error) {
	switch agentName {
	case "writer":
		return "Draft", TypeMetadata["Draft"], nil
	case "editor":
		return "PublishedPost", TypeMetadata["PublishedPost"], nil
	case "researcher":
		return "ResearchOutput", TypeMetadata["ResearchOutput"], nil
	case "outliner":
		return "BlogOutline", TypeMetadata["BlogOutline"], nil
	default:
		return "", nil, fmt.Errorf("agent %s not found", agentName)
	}
}

// ============ THREAD MANAGEMENT ============

// StartBlogThreadThread starts a new blog_thread thread
func (s *Service) StartBlogThreadThread() (*aiwf.ThreadState, error) {
	if s.threadManager == nil {
		return nil, fmt.Errorf("thread manager not configured")
	}
	return s.threadManager.Start(nil, "", aiwf.ThreadBinding{
		Name:     "blog_thread",
		Provider: "openai",
		Strategy: "append",
	})
}

// ============ HELPERS ============

// isValidEmail checks if email is valid
func isValidEmail(email string) bool {
	// Simple email validation
	return strings.Contains(email, "@") && strings.Contains(email, ".")
}
