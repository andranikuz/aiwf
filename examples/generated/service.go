// Code generated by aiwf. DO NOT EDIT.

package aiwfgen

import (
	"fmt"

	"github.com/andranikuz/aiwf/runtime/go/aiwf"
)

// Service provides access to all agents
type Service struct {
	client        aiwf.ModelClient
	threadManager aiwf.ThreadManager
	artifactStore aiwf.ArtifactStore
	agents        *Agents
}

// NewService creates a new service instance
func NewService(client aiwf.ModelClient) *Service {
	s := &Service{
		client: client,
	}

	// Initialize agents
	customer_supportAgent := NewCustomerSupportAgent(client)
	customer_supportAgent.Types = s // Inject TypeProvider
	data_analystAgent := NewDataAnalystAgent(client)
	data_analystAgent.Types = s // Inject TypeProvider
	creative_writerAgent := NewCreativeWriterAgent(client)
	creative_writerAgent.Types = s // Inject TypeProvider

	s.agents = &Agents{
		DataAnalyst: data_analystAgent,
		CreativeWriter: creative_writerAgent,
		CustomerSupport: customer_supportAgent,
	}

	return s
}

// WithThreadManager sets the thread manager
func (s *Service) WithThreadManager(tm aiwf.ThreadManager) *Service {
	s.threadManager = tm
	return s
}

// WithArtifactStore sets the artifact store
func (s *Service) WithArtifactStore(store aiwf.ArtifactStore) *Service {
	s.artifactStore = store
	return s
}

// Agents returns the agents instance
func (s *Service) Agents() *Agents {
	return s.agents
}

// ============ TYPE PROVIDER IMPLEMENTATION ============

// GetTypeMetadata returns metadata for a type
func (s *Service) GetTypeMetadata(typeName string) (any, error) {
	if meta, ok := TypeMetadata[typeName]; ok {
		return meta, nil
	}
	return nil, fmt.Errorf("type %s not found", typeName)
}

// GetInputTypeFor returns input type for an agent
func (s *Service) GetInputTypeFor(agentName string) (string, any, error) {
	switch agentName {
	case "customer_support":
		return "CustomerQuery", TypeMetadata["CustomerQuery"], nil
	case "data_analyst":
		return "DataAnalysisRequest", TypeMetadata["DataAnalysisRequest"], nil
	case "creative_writer":
		return "CreativeWritingRequest", TypeMetadata["CreativeWritingRequest"], nil
	default:
		return "", nil, fmt.Errorf("agent %s not found", agentName)
	}
}

// GetOutputTypeFor returns output type for an agent
func (s *Service) GetOutputTypeFor(agentName string) (string, any, error) {
	switch agentName {
	case "data_analyst":
		return "DataAnalysisResult", TypeMetadata["DataAnalysisResult"], nil
	case "creative_writer":
		return "string", TypeMetadata["string"], nil
	case "customer_support":
		return "SupportResponse", TypeMetadata["SupportResponse"], nil
	default:
		return "", nil, fmt.Errorf("agent %s not found", agentName)
	}
}

// ============ THREAD MANAGEMENT ============

// StartCustomerSupportThreadThread starts a new customer_support_thread thread
func (s *Service) StartCustomerSupportThreadThread() (*aiwf.ThreadState, error) {
	if s.threadManager == nil {
		return nil, fmt.Errorf("thread manager not configured")
	}
	return s.threadManager.Start(nil, "", aiwf.ThreadBinding{
		Name:     "customer_support_thread",
		Provider: "openai",
		Strategy: "append",
	})
}

