// Code generated by aiwf. DO NOT EDIT.

package blog_pipeline_sdk

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/andranikuz/aiwf/runtime/go/aiwf"
)

// Agents contains all generated agents
type Agents struct {
	Researcher *ResearcherAgent
	Outliner *OutlinerAgent
	Writer *WriterAgent
	Editor *EditorAgent
}

// ResearcherAgent represents the researcher agent
type ResearcherAgent struct {
	aiwf.AgentBase
	threadBinding *aiwf.ThreadBinding
}

// NewResearcherAgent creates a new researcher agent
func NewResearcherAgent(client aiwf.ModelClient) *ResearcherAgent {
	return &ResearcherAgent{
		AgentBase: aiwf.AgentBase{
			Config: aiwf.AgentConfig{
				Name:           "researcher",
				Model:          "gpt-4o",
				SystemPrompt:   `Research topics thoroughly`,
				InputTypeName:  "ResearchInput",
				OutputTypeName: "ResearchOutput",
				MaxTokens:      2000,
				Temperature:    0.7,
			},
			Client: client,
		},
		threadBinding: &aiwf.ThreadBinding{
			Name:     "blog_thread",
			Strategy: "",
		},
	}
}

// Run executes the researcher agent
func (a *ResearcherAgent) Run(ctx context.Context, input ResearchInput) (*ResearchOutput, *aiwf.Trace, error) {
	// Validate input
	if err := ValidateResearchInput(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	// Call model
	result, trace, err := a.CallModel(ctx, input, nil)
	if err != nil {
		return nil, trace, err
	}

	// Parse response
	var output ResearchOutput
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}

// RunWithThread executes the researcher agent with thread state
func (a *ResearcherAgent) RunWithThread(ctx context.Context, input ResearchInput, thread *aiwf.ThreadState) (*ResearchOutput, *aiwf.Trace, error) {
	if err := ValidateResearchInput(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	result, trace, err := a.CallModel(ctx, input, thread)
	if err != nil {
		return nil, trace, err
	}

	var output ResearchOutput
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}

// ThreadBinding returns thread configuration for researcher
func (a *ResearcherAgent) ThreadBinding() *aiwf.ThreadBinding {
	return a.threadBinding
}


// OutlinerAgent represents the outliner agent
type OutlinerAgent struct {
	aiwf.AgentBase
	threadBinding *aiwf.ThreadBinding
}

// NewOutlinerAgent creates a new outliner agent
func NewOutlinerAgent(client aiwf.ModelClient) *OutlinerAgent {
	return &OutlinerAgent{
		AgentBase: aiwf.AgentBase{
			Config: aiwf.AgentConfig{
				Name:           "outliner",
				Model:          "gpt-4o",
				SystemPrompt:   `Create structured outlines`,
				InputTypeName:  "OutlineInput",
				OutputTypeName: "BlogOutline",
				MaxTokens:      2000,
				Temperature:    0.7,
			},
			Client: client,
		},
		threadBinding: &aiwf.ThreadBinding{
			Name:     "blog_thread",
			Strategy: "",
		},
	}
}

// Run executes the outliner agent
func (a *OutlinerAgent) Run(ctx context.Context, input OutlineInput) (*BlogOutline, *aiwf.Trace, error) {
	// Validate input
	if err := ValidateOutlineInput(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	// Call model
	result, trace, err := a.CallModel(ctx, input, nil)
	if err != nil {
		return nil, trace, err
	}

	// Parse response
	var output BlogOutline
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}

// RunWithThread executes the outliner agent with thread state
func (a *OutlinerAgent) RunWithThread(ctx context.Context, input OutlineInput, thread *aiwf.ThreadState) (*BlogOutline, *aiwf.Trace, error) {
	if err := ValidateOutlineInput(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	result, trace, err := a.CallModel(ctx, input, thread)
	if err != nil {
		return nil, trace, err
	}

	var output BlogOutline
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}

// ThreadBinding returns thread configuration for outliner
func (a *OutlinerAgent) ThreadBinding() *aiwf.ThreadBinding {
	return a.threadBinding
}


// WriterAgent represents the writer agent
type WriterAgent struct {
	aiwf.AgentBase
	threadBinding *aiwf.ThreadBinding
}

// NewWriterAgent creates a new writer agent
func NewWriterAgent(client aiwf.ModelClient) *WriterAgent {
	return &WriterAgent{
		AgentBase: aiwf.AgentBase{
			Config: aiwf.AgentConfig{
				Name:           "writer",
				Model:          "gpt-4o",
				SystemPrompt:   `Write engaging content`,
				InputTypeName:  "WritingInput",
				OutputTypeName: "Draft",
				MaxTokens:      2000,
				Temperature:    0.7,
			},
			Client: client,
		},
		threadBinding: &aiwf.ThreadBinding{
			Name:     "blog_thread",
			Strategy: "",
		},
	}
}

// Run executes the writer agent
func (a *WriterAgent) Run(ctx context.Context, input WritingInput) (*Draft, *aiwf.Trace, error) {
	// Validate input
	if err := ValidateWritingInput(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	// Call model
	result, trace, err := a.CallModel(ctx, input, nil)
	if err != nil {
		return nil, trace, err
	}

	// Parse response
	var output Draft
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}

// RunWithThread executes the writer agent with thread state
func (a *WriterAgent) RunWithThread(ctx context.Context, input WritingInput, thread *aiwf.ThreadState) (*Draft, *aiwf.Trace, error) {
	if err := ValidateWritingInput(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	result, trace, err := a.CallModel(ctx, input, thread)
	if err != nil {
		return nil, trace, err
	}

	var output Draft
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}

// ThreadBinding returns thread configuration for writer
func (a *WriterAgent) ThreadBinding() *aiwf.ThreadBinding {
	return a.threadBinding
}


// EditorAgent represents the editor agent
type EditorAgent struct {
	aiwf.AgentBase
	threadBinding *aiwf.ThreadBinding
}

// NewEditorAgent creates a new editor agent
func NewEditorAgent(client aiwf.ModelClient) *EditorAgent {
	return &EditorAgent{
		AgentBase: aiwf.AgentBase{
			Config: aiwf.AgentConfig{
				Name:           "editor",
				Model:          "gpt-4o-mini",
				SystemPrompt:   `Polish and finalize content`,
				InputTypeName:  "EditInput",
				OutputTypeName: "PublishedPost",
				MaxTokens:      2000,
				Temperature:    0.7,
			},
			Client: client,
		},
		threadBinding: &aiwf.ThreadBinding{
			Name:     "blog_thread",
			Strategy: "",
		},
	}
}

// Run executes the editor agent
func (a *EditorAgent) Run(ctx context.Context, input EditInput) (*PublishedPost, *aiwf.Trace, error) {
	// Validate input
	if err := ValidateEditInput(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	// Call model
	result, trace, err := a.CallModel(ctx, input, nil)
	if err != nil {
		return nil, trace, err
	}

	// Parse response
	var output PublishedPost
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}

// RunWithThread executes the editor agent with thread state
func (a *EditorAgent) RunWithThread(ctx context.Context, input EditInput, thread *aiwf.ThreadState) (*PublishedPost, *aiwf.Trace, error) {
	if err := ValidateEditInput(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	result, trace, err := a.CallModel(ctx, input, thread)
	if err != nil {
		return nil, trace, err
	}

	var output PublishedPost
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}

// ThreadBinding returns thread configuration for editor
func (a *EditorAgent) ThreadBinding() *aiwf.ThreadBinding {
	return a.threadBinding
}


