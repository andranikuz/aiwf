package {{ .Package }}

import (
    "reflect"

    "github.com/andranikuz/aiwf/runtime/go/aiwf"
)

type Service interface {
    Agents() Agents
    Workflows() Workflows
    WithThreadManager(tm aiwf.ThreadManager) Service
    WithDialogDecider(decider aiwf.DialogDecider) Service
    WithMaxDialogRounds(n int) Service
}

type service struct {
    client          aiwf.ModelClient
    threadManager   aiwf.ThreadManager
    dialogDecider   aiwf.DialogDecider
    maxDialogRounds int
}

func NewService(client aiwf.ModelClient) Service {
    return &service{client: client, maxDialogRounds: 1, dialogDecider: aiwf.DefaultDialogDecider{}}
}

func (s *service) WithThreadManager(tm aiwf.ThreadManager) Service {
    copy := *s
    copy.threadManager = tm
    return &copy
}

func (s *service) WithDialogDecider(decider aiwf.DialogDecider) Service {
    copy := *s
    if decider != nil {
        copy.dialogDecider = decider
    }
    return &copy
}

func (s *service) WithMaxDialogRounds(n int) Service {
    copy := *s
    if n > 0 {
        copy.maxDialogRounds = n
    }
    return &copy
}

func (s *service) Agents() Agents { return &agents{client: s.client} }

func (s *service) Workflows() Workflows {
{{- if .HasWorkflows }}
    return &workflows{
        client:          s.client,
        threads:         s.threadManager,
        dialogDecider:   s.dialogDecider,
        maxDialogRounds: s.maxDialogRounds,
    }
{{- else }}
    return nil
{{- end }}
}

{{- if not .HasWorkflows }}

type Workflows interface{}
{{- end }}

func mergeTrace(base, next *aiwf.Trace) *aiwf.Trace {
    if base == nil {
        return next
    }
    if next == nil {
        return base
    }
    return next
}

func mergeTraces(items ...*aiwf.Trace) *aiwf.Trace {
    var merged *aiwf.Trace
    for _, tr := range items {
        if tr == nil {
            continue
        }
        merged = mergeTrace(merged, tr)
    }
    return merged
}

func mergeWorkflowOutput[T any](base, next T) T {
    if any(base) == nil {
        return next
    }
    if reflect.ValueOf(base).IsZero() {
        return next
    }
    return base
}
