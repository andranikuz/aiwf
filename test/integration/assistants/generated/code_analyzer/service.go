// Code generated by aiwf. DO NOT EDIT.

package code_analyzer_sdk

import (
	"fmt"

	"github.com/andranikuz/aiwf/runtime/go/aiwf"
)

// Service provides access to all agents and workflows
type Service struct {
	client        aiwf.ModelClient
	threadManager aiwf.ThreadManager
	artifactStore aiwf.ArtifactStore
	agents        *Agents
}

// NewService creates a new service instance
func NewService(client aiwf.ModelClient) *Service {
	s := &Service{
		client: client,
	}

	// Initialize agents
	s.agents = &Agents{
		CodeAnalyzer: NewCodeAnalyzerAgent(client),
	}

	return s
}

// WithThreadManager sets the thread manager
func (s *Service) WithThreadManager(tm aiwf.ThreadManager) *Service {
	s.threadManager = tm
	return s
}

// WithArtifactStore sets the artifact store
func (s *Service) WithArtifactStore(store aiwf.ArtifactStore) *Service {
	s.artifactStore = store
	return s
}

// Agents returns the agents instance
func (s *Service) Agents() *Agents {
	return s.agents
}

// ============ TYPE PROVIDER IMPLEMENTATION ============

// GetTypeMetadata returns metadata for a type
func (s *Service) GetTypeMetadata(typeName string) (any, error) {
	if meta, ok := TypeMetadata[typeName]; ok {
		return meta, nil
	}
	return nil, fmt.Errorf("type %s not found", typeName)
}

// GetInputTypeFor returns input type for an agent
func (s *Service) GetInputTypeFor(agentName string) (string, any, error) {
	switch agentName {
	case "code_analyzer":
		return "CodeAnalysisRequest", TypeMetadata["CodeAnalysisRequest"], nil
	default:
		return "", nil, fmt.Errorf("agent %s not found", agentName)
	}
}

// GetOutputTypeFor returns output type for an agent
func (s *Service) GetOutputTypeFor(agentName string) (string, any, error) {
	switch agentName {
	case "code_analyzer":
		return "AnalysisResult", TypeMetadata["AnalysisResult"], nil
	default:
		return "", nil, fmt.Errorf("agent %s not found", agentName)
	}
}

// ============ HELPERS ============

