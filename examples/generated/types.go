// Code generated by aiwf. DO NOT EDIT.

package aiwfgen

// CreativeWritingRequest represents CreativeWritingRequest
type CreativeWritingRequest struct {
	Prompt string `json:"prompt"`
	Style string `json:"style"`
	WordCount int `json:"word_count"`
	Tone string `json:"tone"`
}

// CustomerQuery represents CustomerQuery
type CustomerQuery struct {
	Urgency string `json:"urgency"`
	CustomerId string `json:"customer_id"`
	Message string `json:"message"`
	Category string `json:"category"`
}

// SupportResponse represents SupportResponse
type SupportResponse struct {
	Reply string `json:"reply"`
	Resolved bool `json:"resolved"`
	FollowupNeeded bool `json:"followup_needed"`
	TicketId string `json:"ticket_id"`
	NextSteps []string `json:"next_steps"`
	SatisfactionPredicted float64 `json:"satisfaction_predicted"`
}

// DataAnalysisRequest represents DataAnalysisRequest
type DataAnalysisRequest struct {
	Dataset string `json:"dataset"`
	Query string `json:"query"`
	AnalysisType string `json:"analysis_type"`
	IncludeVisualization bool `json:"include_visualization"`
	ConfidenceThreshold float64 `json:"confidence_threshold"`
}

// DataAnalysisResult represents DataAnalysisResult
type DataAnalysisResult struct {
	Findings []*Finding `json:"findings"`
	Metrics *Metrics `json:"metrics"`
	Recommendations []string `json:"recommendations"`
	ConfidenceScore float64 `json:"confidence_score"`
	VisualizationData *VisualizationData `json:"visualization_data"`
	Summary string `json:"summary"`
}

// Finding represents Finding
type Finding struct {
	Title string `json:"title"`
	Description string `json:"description"`
	Importance string `json:"importance"`
	Evidence []string `json:"evidence"`
}

// Metrics represents Metrics
type Metrics struct {
	TotalRecords int `json:"total_records"`
	ProcessedRecords int `json:"processed_records"`
	AnomaliesDetected int `json:"anomalies_detected"`
	ProcessingTimeMs int `json:"processing_time_ms"`
	Accuracy float64 `json:"accuracy"`
}

// VisualizationData represents VisualizationData
type VisualizationData struct {
	ChartType string `json:"chart_type"`
	XAxis []string `json:"x_axis"`
	YAxis []float64 `json:"y_axis"`
	Labels []string `json:"labels"`
}

// ============ VALIDATORS ============

// ValidateCustomerQuery validates CustomerQuery
func ValidateCustomerQuery(v *CustomerQuery) error {
	// No validation rules
	return nil
}

// ValidateSupportResponse validates SupportResponse
func ValidateSupportResponse(v *SupportResponse) error {
	// No validation rules
	return nil
}

// ValidateDataAnalysisRequest validates DataAnalysisRequest
func ValidateDataAnalysisRequest(v *DataAnalysisRequest) error {
	// No validation rules
	return nil
}

// ValidateDataAnalysisResult validates DataAnalysisResult
func ValidateDataAnalysisResult(v *DataAnalysisResult) error {
	// No validation rules
	return nil
}

// ValidateFinding validates Finding
func ValidateFinding(v *Finding) error {
	// No validation rules
	return nil
}

// ValidateMetrics validates Metrics
func ValidateMetrics(v *Metrics) error {
	// No validation rules
	return nil
}

// ValidateVisualizationData validates VisualizationData
func ValidateVisualizationData(v *VisualizationData) error {
	// No validation rules
	return nil
}

// ValidateCreativeWritingRequest validates CreativeWritingRequest
func ValidateCreativeWritingRequest(v *CreativeWritingRequest) error {
	// No validation rules
	return nil
}

// ============ TYPE METADATA ============

// TypeMetadata exports type definitions for providers
var TypeMetadata = map[string]interface{}{
	"Metrics": map[string]interface{}{
		"type": "object",
		"properties": map[string]interface{}{
			"accuracy": map[string]interface{}{
		"type": "number",
	},
			"total_records": map[string]interface{}{
		"type": "integer",
	},
			"processed_records": map[string]interface{}{
		"type": "integer",
	},
			"anomalies_detected": map[string]interface{}{
		"type": "integer",
	},
			"processing_time_ms": map[string]interface{}{
		"type": "integer",
	},
		},
		"required": []string{"accuracy", "total_records", "processed_records", "anomalies_detected", "processing_time_ms"},
		"additionalProperties": false,
	},
	"VisualizationData": map[string]interface{}{
		"type": "object",
		"properties": map[string]interface{}{
			"chart_type": map[string]interface{}{
		"type": "string",
		"enum": []string{"bar", "line", "pie", "scatter", "heatmap"},
	},
			"x_axis": map[string]interface{}{
		"type": "array",
		"items": map[string]interface{}{
		"type": "string",
	},
	},
			"y_axis": map[string]interface{}{
		"type": "array",
		"items": map[string]interface{}{
		"type": "number",
	},
	},
			"labels": map[string]interface{}{
		"type": "array",
		"items": map[string]interface{}{
		"type": "string",
	},
	},
		},
		"required": []string{"chart_type", "x_axis", "y_axis", "labels"},
		"additionalProperties": false,
	},
	"CreativeWritingRequest": map[string]interface{}{
		"type": "object",
		"properties": map[string]interface{}{
			"style": map[string]interface{}{
		"type": "string",
		"enum": []string{"poetic", "narrative", "descriptive", "persuasive", "humorous"},
	},
			"word_count": map[string]interface{}{
		"type": "integer",
	},
			"tone": map[string]interface{}{
		"type": "string",
		"enum": []string{"formal", "informal", "friendly", "professional", "dramatic"},
	},
			"prompt": map[string]interface{}{
		"type": "string",
	},
		},
		"required": []string{"style", "word_count", "tone", "prompt"},
		"additionalProperties": false,
	},
	"CustomerQuery": map[string]interface{}{
		"type": "object",
		"properties": map[string]interface{}{
			"message": map[string]interface{}{
		"type": "string",
	},
			"category": map[string]interface{}{
		"type": "string",
		"enum": []string{"technical", "billing", "general", "complaint", "feedback"},
	},
			"urgency": map[string]interface{}{
		"type": "string",
		"enum": []string{"low", "medium", "high"},
	},
			"customer_id": map[string]interface{}{
		"type": "string",
	},
		},
		"required": []string{"message", "category", "urgency", "customer_id"},
		"additionalProperties": false,
	},
	"SupportResponse": map[string]interface{}{
		"type": "object",
		"properties": map[string]interface{}{
			"reply": map[string]interface{}{
		"type": "string",
	},
			"resolved": map[string]interface{}{
		"type": "boolean",
	},
			"followup_needed": map[string]interface{}{
		"type": "boolean",
	},
			"ticket_id": map[string]interface{}{
		"type": "string",
	},
			"next_steps": map[string]interface{}{
		"type": "array",
		"items": map[string]interface{}{
		"type": "string",
	},
	},
			"satisfaction_predicted": map[string]interface{}{
		"type": "number",
	},
		},
		"required": []string{"reply", "resolved", "followup_needed", "ticket_id", "next_steps", "satisfaction_predicted"},
		"additionalProperties": false,
	},
	"DataAnalysisRequest": map[string]interface{}{
		"type": "object",
		"properties": map[string]interface{}{
			"include_visualization": map[string]interface{}{
		"type": "boolean",
	},
			"confidence_threshold": map[string]interface{}{
		"type": "number",
	},
			"dataset": map[string]interface{}{
		"type": "string",
	},
			"query": map[string]interface{}{
		"type": "string",
	},
			"analysis_type": map[string]interface{}{
		"type": "string",
		"enum": []string{"statistical", "predictive", "descriptive", "comparative"},
	},
		},
		"required": []string{"include_visualization", "confidence_threshold", "dataset", "query", "analysis_type"},
		"additionalProperties": false,
	},
	"DataAnalysisResult": map[string]interface{}{
		"type": "object",
		"properties": map[string]interface{}{
			"findings": map[string]interface{}{
		"type": "array",
		"items": map[string]interface{}{
		"type": "object",
		"properties": map[string]interface{}{
			"importance": map[string]interface{}{
		"type": "string",
		"enum": []string{"low", "medium", "high", "critical"},
	},
			"evidence": map[string]interface{}{
		"type": "array",
		"items": map[string]interface{}{
		"type": "string",
	},
	},
			"title": map[string]interface{}{
		"type": "string",
	},
			"description": map[string]interface{}{
		"type": "string",
	},
		},
		"required": []string{"importance", "evidence", "title", "description"},
		"additionalProperties": false,
	},
	},
			"metrics": map[string]interface{}{
		"type": "object",
		"properties": map[string]interface{}{
			"processed_records": map[string]interface{}{
		"type": "integer",
	},
			"anomalies_detected": map[string]interface{}{
		"type": "integer",
	},
			"processing_time_ms": map[string]interface{}{
		"type": "integer",
	},
			"accuracy": map[string]interface{}{
		"type": "number",
	},
			"total_records": map[string]interface{}{
		"type": "integer",
	},
		},
		"required": []string{"processed_records", "anomalies_detected", "processing_time_ms", "accuracy", "total_records"},
		"additionalProperties": false,
	},
			"recommendations": map[string]interface{}{
		"type": "array",
		"items": map[string]interface{}{
		"type": "string",
	},
	},
			"confidence_score": map[string]interface{}{
		"type": "number",
	},
			"visualization_data": map[string]interface{}{
		"type": "object",
		"properties": map[string]interface{}{
			"chart_type": map[string]interface{}{
		"type": "string",
		"enum": []string{"bar", "line", "pie", "scatter", "heatmap"},
	},
			"x_axis": map[string]interface{}{
		"type": "array",
		"items": map[string]interface{}{
		"type": "string",
	},
	},
			"y_axis": map[string]interface{}{
		"type": "array",
		"items": map[string]interface{}{
		"type": "number",
	},
	},
			"labels": map[string]interface{}{
		"type": "array",
		"items": map[string]interface{}{
		"type": "string",
	},
	},
		},
		"required": []string{"chart_type", "x_axis", "y_axis", "labels"},
		"additionalProperties": false,
	},
			"summary": map[string]interface{}{
		"type": "string",
	},
		},
		"required": []string{"findings", "metrics", "recommendations", "confidence_score", "visualization_data", "summary"},
		"additionalProperties": false,
	},
	"Finding": map[string]interface{}{
		"type": "object",
		"properties": map[string]interface{}{
			"description": map[string]interface{}{
		"type": "string",
	},
			"importance": map[string]interface{}{
		"type": "string",
		"enum": []string{"low", "medium", "high", "critical"},
	},
			"evidence": map[string]interface{}{
		"type": "array",
		"items": map[string]interface{}{
		"type": "string",
	},
	},
			"title": map[string]interface{}{
		"type": "string",
	},
		},
		"required": []string{"description", "importance", "evidence", "title"},
		"additionalProperties": false,
	},
}
// ============ HELPERS ============

