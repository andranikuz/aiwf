package {{ .Package }}

// NOTE: Ниже показаны заглушки типов. Замените `map[string]any` на структуры,
//      соответствующие JSON Schema, чтобы получить типизированный SDK.

{{- range .Assistants }}
{{- if .InputContract.Fields }}
// {{ .MethodName }}Input соответствует схеме {{ .InputSchemaRef }}.
type {{ .MethodName }}Input struct {
{{- range .InputContract.Fields }}
    {{ .Name }} {{ .Type }} `json:"{{ .JSON }}"`
{{- end }}
}
{{- else }}
// {{ .MethodName }}Input соответствует схеме {{ .InputSchemaRef }}.
type {{ .MethodName }}Input map[string]any
{{- end }}

{{- if .OutputContract.Fields }}
// {{ .MethodName }}Output соответствует схеме {{ .OutputSchemaRef }}.
type {{ .MethodName }}Output struct {
{{- range .OutputContract.Fields }}
    {{ .Name }} {{ .Type }} `json:"{{ .JSON }}"`
{{- end }}
}
{{- else }}
// {{ .MethodName }}Output соответствует схеме {{ .OutputSchemaRef }}.
type {{ .MethodName }}Output map[string]any
{{- end }}

{{ end }}

{{- range .Workflows }}
// {{ .MethodName }}Input описывает вход workflow.
{{- if eq .InputType "map[string]any" }}
type {{ .MethodName }}Input map[string]any
{{- else }}
type {{ .MethodName }}Input = {{ .InputType }}
{{- end }}

// {{ .MethodName }}Output описывает выход workflow.
{{- if eq .OutputType "map[string]any" }}
type {{ .MethodName }}Output map[string]any
{{- else }}
type {{ .MethodName }}Output = {{ .OutputType }}
{{- end }}
{{ end }}
