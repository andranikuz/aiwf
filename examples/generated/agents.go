// Code generated by aiwf. DO NOT EDIT.

package aiwfgen

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/andranikuz/aiwf/runtime/go/aiwf"
)

// Agents contains all generated agents
type Agents struct {
	CustomerSupport *CustomerSupportAgent
	DataAnalyst *DataAnalystAgent
	CreativeWriter *CreativeWriterAgent
}

// DataAnalystAgent represents the data_analyst agent
type DataAnalystAgent struct {
	aiwf.AgentBase
}

// NewDataAnalystAgent creates a new data_analyst agent
func NewDataAnalystAgent(client aiwf.ModelClient) *DataAnalystAgent {
	return &DataAnalystAgent{
		AgentBase: aiwf.AgentBase{
			Config: aiwf.AgentConfig{
				Name:           "data_analyst",
				Model:          "gpt-4o-mini",
				SystemPrompt:   `You are an expert data analyst. Analyze the provided dataset and query\nto extract meaningful insights. Provide structured analysis with clear\nfindings, metrics, and visualization suggestions. Be precise and\ndata-driven in your analysis.\n`,
				InputTypeName:  "DataAnalysisRequest",
				OutputTypeName: "DataAnalysisResult",
				MaxTokens:      2000,
				Temperature:    0.7,
			},
			Client: client,
		},
	}
}

// Run executes the data_analyst agent
func (a *DataAnalystAgent) Run(ctx context.Context, input DataAnalysisRequest) (*DataAnalysisResult, *aiwf.Trace, error) {
	// Validate input
	if err := ValidateDataAnalysisRequest(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	// Call model
	result, trace, err := a.CallModel(ctx, input, nil)
	if err != nil {
		return nil, trace, err
	}

	// Parse response
	var output DataAnalysisResult
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}


// CreativeWriterAgent represents the creative_writer agent
type CreativeWriterAgent struct {
	aiwf.AgentBase
}

// NewCreativeWriterAgent creates a new creative_writer agent
func NewCreativeWriterAgent(client aiwf.ModelClient) *CreativeWriterAgent {
	return &CreativeWriterAgent{
		AgentBase: aiwf.AgentBase{
			Config: aiwf.AgentConfig{
				Name:           "creative_writer",
				Model:          "gpt-3.5-turbo",
				SystemPrompt:   `You are a creative writer with expertise in various writing styles.\nGenerate engaging, original content based on the given prompt.\nFocus on creativity, flow, and adherence to the requested style.\nReturn plain text without any JSON formatting or structure.\n`,
				InputTypeName:  "CreativeWritingRequest",
				OutputTypeName: "string",
				MaxTokens:      2000,
				Temperature:    0.7,
			},
			Client: client,
		},
	}
}

// Run executes the creative_writer agent
func (a *CreativeWriterAgent) Run(ctx context.Context, input CreativeWritingRequest) (*string, *aiwf.Trace, error) {
	// Validate input
	if err := ValidateCreativeWritingRequest(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	// Call model
	result, trace, err := a.CallModel(ctx, input, nil)
	if err != nil {
		return nil, trace, err
	}

	// Parse response
	output := string(result)
	return &output, trace, nil
}


// CustomerSupportAgent represents the customer_support agent
type CustomerSupportAgent struct {
	aiwf.AgentBase
	threadBinding *aiwf.ThreadBinding
}

// NewCustomerSupportAgent creates a new customer_support agent
func NewCustomerSupportAgent(client aiwf.ModelClient) *CustomerSupportAgent {
	return &CustomerSupportAgent{
		AgentBase: aiwf.AgentBase{
			Config: aiwf.AgentConfig{
				Name:           "customer_support",
				Model:          "gpt-4o-mini",
				SystemPrompt:   `You are a helpful customer support agent. Assist customers with their\nqueries professionally and empathetically. Remember conversation context\nand provide personalized responses. Always aim to resolve issues efficiently\nwhile maintaining high customer satisfaction.\n`,
				InputTypeName:  "CustomerQuery",
				OutputTypeName: "SupportResponse",
				MaxTokens:      2000,
				Temperature:    0.7,
			},
			Client: client,
		},
		threadBinding: &aiwf.ThreadBinding{
			Name:     "customer_support_thread",
			Strategy: "append",
		},
	}
}

// Run executes the customer_support agent
func (a *CustomerSupportAgent) Run(ctx context.Context, input CustomerQuery) (*SupportResponse, *aiwf.Trace, error) {
	// Validate input
	if err := ValidateCustomerQuery(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	// Call model
	result, trace, err := a.CallModel(ctx, input, nil)
	if err != nil {
		return nil, trace, err
	}

	// Parse response
	var output SupportResponse
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}

// RunWithThread executes the customer_support agent with thread state
func (a *CustomerSupportAgent) RunWithThread(ctx context.Context, input CustomerQuery, thread *aiwf.ThreadState) (*SupportResponse, *aiwf.Trace, error) {
	if err := ValidateCustomerQuery(&input); err != nil {
		return nil, nil, fmt.Errorf("validation failed: %w", err)
	}

	result, trace, err := a.CallModel(ctx, input, thread)
	if err != nil {
		return nil, trace, err
	}

	var output SupportResponse
	if err := json.Unmarshal(result, &output); err != nil {
		return nil, trace, fmt.Errorf("failed to parse response: %w", err)
	}

	return &output, trace, nil
}

// ThreadBinding returns thread configuration for customer_support
func (a *CustomerSupportAgent) ThreadBinding() *aiwf.ThreadBinding {
	return a.threadBinding
}

// RunDialog executes the customer_support agent in dialog mode
func (a *CustomerSupportAgent) RunDialog(ctx context.Context, input CustomerQuery, thread *aiwf.ThreadState, maxRounds int) (*SupportResponse, *aiwf.Trace, error) {
	// TODO: Implement dialog logic
	return a.RunWithThread(ctx, input, thread)
}


