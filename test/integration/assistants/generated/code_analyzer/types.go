// Code generated by aiwf. DO NOT EDIT.

package code_analyzer_sdk

// Metric represents Metric
type Metric struct {
	Value float64 `json:"value"`
	Unit string `json:"unit"`
	Name string `json:"name"`
}

// CodeAnalysisRequest represents CodeAnalysisRequest
type CodeAnalysisRequest struct {
	Code string `json:"code"`
	Language string `json:"language"`
	AnalysisFocus string `json:"analysis_focus"`
}

// AnalysisResult represents AnalysisResult
type AnalysisResult struct {
	Issues []*Issue `json:"issues"`
	Metrics []*Metric `json:"metrics"`
	Summary map[string]interface{} `json:"summary"`
}

// Issue represents Issue
type Issue struct {
	Suggestion string `json:"suggestion"`
	Severity string `json:"severity"`
	Type string `json:"type"`
	Line int `json:"line"`
	Message string `json:"message"`
}

// ============ VALIDATORS ============

// ValidateIssue validates Issue
func ValidateIssue(v *Issue) error {
	// No validation rules
	return nil
}

// ValidateMetric validates Metric
func ValidateMetric(v *Metric) error {
	// No validation rules
	return nil
}

// ValidateCodeAnalysisRequest validates CodeAnalysisRequest
func ValidateCodeAnalysisRequest(v *CodeAnalysisRequest) error {
	// No validation rules
	return nil
}

// ValidateAnalysisResult validates AnalysisResult
func ValidateAnalysisResult(v *AnalysisResult) error {
	// No validation rules
	return nil
}

// ============ TYPE METADATA ============

// TypeMetadata exports type definitions for providers
var TypeMetadata = map[string]interface{}{
	"Issue": nil, // TODO: export actual TypeDef
	"Metric": nil, // TODO: export actual TypeDef
	"CodeAnalysisRequest": nil, // TODO: export actual TypeDef
	"AnalysisResult": nil, // TODO: export actual TypeDef
}
