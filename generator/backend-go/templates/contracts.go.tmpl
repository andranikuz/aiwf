package {{ .Package }}

{{- define "renderContract" -}}
{{- $c := . -}}
{{- if $c.IsStruct }}
// {{ $c.Name }} соответствует схеме {{ $c.SchemaRef }}.
type {{ $c.Name }} struct {
{{- range $c.Root.Fields }}
    {{ .Name }} {{ .Type }} `json:"{{ .JSON }}"`
{{- end }}
}

{{- range $c.Nested }}
type {{ .Name }} struct {
{{- range .Fields }}
    {{ .Name }} {{ .Type }} `json:"{{ .JSON }}"`
{{- end }}
}

{{- end }}
{{- else if $c.Alias }}
// {{ $c.Name }} соответствует схеме {{ $c.SchemaRef }}.
type {{ $c.Name }} = {{ $c.Alias }}

{{- if $c.Enum }}
const (
{{- range $c.Enum }}
    {{ .Const }} {{ $c.Name }} = {{ printf "%q" .Value }}
{{- end }}
)

{{- end }}
{{- else }}
// {{ $c.Name }} соответствует схеме {{ $c.SchemaRef }}.
type {{ $c.Name }} map[string]any

{{- end }}
{{- end }}

{{- if .Shared }}
{{- range .Shared }}
{{ template "renderContract" . }}
{{ end }}

{{- end }}
{{- range .Assistants }}
{{ template "renderContract" .InputContract }}
{{ template "renderContract" .OutputContract }}
{{ end }}

{{- range .Workflows }}
// {{ .MethodName }}Input описывает вход workflow.
{{- if eq .InputType "map[string]any" }}
type {{ .MethodName }}Input map[string]any
{{- else }}
type {{ .MethodName }}Input = {{ .InputType }}
{{- end }}

// {{ .MethodName }}Output описывает выход workflow.
{{- if eq .OutputType "map[string]any" }}
type {{ .MethodName }}Output map[string]any
{{- else }}
type {{ .MethodName }}Output = {{ .OutputType }}
{{- end }}
{{ end }}
